{"ast":null,"code":"import Web3 from 'web3'; // import Marketplace from 'contracts/Marketplace.json';\n\nimport MainAuction from 'contracts/MainAuction.json'; // import MainAuction from 'contracts/jajaja.json';\n\nlet selectedAccount; // let erc20Contract;\n// let isInitialized = false;\n\nexport const init = async () => {\n  let provider = window.ethereum;\n\n  if (typeof provider !== 'undefined') {\n    provider.on('accountsChanged', () => window.location.reload());\n    return provider.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      selectedAccount = accounts[0];\n      return selectedAccount;\n    }).catch(err => {\n      console.log(err);\n      return;\n    });\n  } else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n  }\n}; // export const getProductData = async () => {\n// \tlet provider = window.ethereum;\n// \tlet marketContract;\n// \tconst web3 = new Web3(provider);\n// \tconst networkId = await web3.eth.net.getId();\n// \tlet products = [];\n// \tmarketContract = new web3.eth.Contract(Marketplace.abi, Marketplace.networks[networkId].address);\n// \tlet productCount = await marketContract.methods.productCount().call();\n// \t// Load products\n// \tfor (var i = 1; i <= productCount; i++) {\n//         const product = await marketContract.methods.products(i).call();\n// \t\tlet millis = parseFloat(product.timestamp) * 1000;\n// \t\tlet productPrice = web3.utils.fromWei(product.price.toString(), \"ether\")\n// \t\tlet product_time = new Date(millis).toLocaleString();\n// \t\tproducts.push({\n// \t\t\tid: product.id,\n// \t\t\tproduct_name: product.name,\n// \t\t\towner: product.owner,\n// \t\t\tseller: product.seller,\n// \t\t\tproduct_price: productPrice,\n// \t\t\tproduct_idr: product.idr_price,\n// \t\t\tstatus_buy: product.purchased,\n// \t\t\ttimestamp: product_time\n// \t\t});\n// \t}\n// \treturn products;\n// }\n// export const createProduct = async (name, price, idrPrice, seller) => {\n// \tlet provider = window.ethereum;\n// \tlet marketContract;\n// \tconst web3 = new Web3(provider);\n// \tconst networkId = await web3.eth.net.getId();\n// \tmarketContract = new web3.eth.Contract(Marketplace.abi, Marketplace.networks[networkId].address);\n// \treturn marketContract.methods.createProduct(name, price, idrPrice).send({from: seller})\n// \t.then(productData => {\n// \t\treturn productData\n// \t}).catch(err => {\n// \t\treturn err.message;\n// \t});\n// }\n\nexport const getAuctionData = async () => {\n  let provider = window.ethereum;\n  let mainAuctionContract; // marketContract\n\n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n  let auctions = [];\n  mainAuctionContract = new web3.eth.Contract(MainAuction.abi, MainAuction.networks[networkId].address);\n  let auctionCount = await mainAuctionContract.methods.auctionCount().call(); // Load products\n\n  for (var i = 1; i <= auctionCount; i++) {\n    const auction = await mainAuctionContract.methods.auctions(i).call();\n    let millis = parseFloat(auction.timestamp) * 1000;\n    let startPrice = web3.utils.fromWei(auction.startPrice.toString(), 'ether');\n    let auction_time = new Date(millis).toLocaleString();\n    auctions.push({\n      auctionId: auction.auctionId,\n      assetName: auction.assetName,\n      assetDetail: auction.assetDetail,\n      startPrice: startPrice,\n      assetOwner: auction.assetOwner,\n      ownerDeposite: auction.ownerDeposite,\n      auctionDuration: auction.auctionDuration // bidding: auction.biddingList,\n\n    });\n  }\n\n  return auctions; // return mainAuctionContract.methods.auctions(1);\n};\nexport const createAuction = async (assetName, assetDetail, startPrice, assetOwner, ownerDeposite, auctionDuration) => {\n  let provider = window.ethereum;\n  let mainAuctionContract;\n  const web3 = new Web3(provider); // const networkId = await web3.eth.net.getId();\n\n  const networkId = await web3.eth.net.getId();\n  mainAuctionContract = new web3.eth.Contract(MainAuction.abi, MainAuction.networks[networkId].address);\n  return mainAuctionContract.methods.createAuction(assetName, assetDetail, startPrice, ownerDeposite, auctionDuration).send({\n    from: assetOwner\n  }).then(auctionData => {\n    return auctionData;\n  }).catch(err => {\n    return err.message;\n  });\n}; // export const purchaseProduct = async (id, price, buyerAddr) => {\n//   let provider = window.ethereum;\n//   let marketContract;\n//   let priceToWei = Web3.utils.toWei(price, 'ether');\n//   const web3 = new Web3(provider);\n//   const networkId = await web3.eth.net.getId();\n//   marketContract = new web3.eth.Contract(\n//     Marketplace.abi,\n//     Marketplace.networks[networkId].address\n//   );\n//   return marketContract.methods\n//     .purchaseProduct(id)\n//     .send({ from: buyerAddr, value: priceToWei })\n//     .then((productData) => {\n//       return productData;\n//     })\n//     .catch((err) => {\n//       return err.message;\n//     });\n// };","map":{"version":3,"names":["Web3","MainAuction","selectedAccount","init","provider","window","ethereum","on","location","reload","request","method","then","accounts","catch","err","console","log","web3","currentProvider","getAuctionData","mainAuctionContract","networkId","eth","net","getId","auctions","Contract","abi","networks","address","auctionCount","methods","call","i","auction","millis","parseFloat","timestamp","startPrice","utils","fromWei","toString","auction_time","Date","toLocaleString","push","auctionId","assetName","assetDetail","assetOwner","ownerDeposite","auctionDuration","createAuction","send","from","auctionData","message"],"sources":["/Users/adityas/Desktop/KULIAH/SMT8/open-auction-dapps/frontend/src/components/Web3Client.js"],"sourcesContent":["import Web3 from 'web3';\n// import Marketplace from 'contracts/Marketplace.json';\nimport MainAuction from 'contracts/MainAuction.json';\n\n// import MainAuction from 'contracts/jajaja.json';\n\nlet selectedAccount;\n\n// let erc20Contract;\n\n// let isInitialized = false;\n\nexport const init = async () => {\n  let provider = window.ethereum;\n\n  if (typeof provider !== 'undefined') {\n    provider.on('accountsChanged', () => window.location.reload());\n    return provider\n      .request({ method: 'eth_requestAccounts' })\n      .then((accounts) => {\n        selectedAccount = accounts[0];\n        return selectedAccount;\n      })\n      .catch((err) => {\n        console.log(err);\n        return;\n      });\n  } else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    console.log(\n      'Non-Ethereum browser detected. You should consider trying MetaMask!'\n    );\n  }\n};\n\n// export const getProductData = async () => {\n// \tlet provider = window.ethereum;\n// \tlet marketContract;\n// \tconst web3 = new Web3(provider);\n// \tconst networkId = await web3.eth.net.getId();\n// \tlet products = [];\n\n// \tmarketContract = new web3.eth.Contract(Marketplace.abi, Marketplace.networks[networkId].address);\n// \tlet productCount = await marketContract.methods.productCount().call();\n// \t// Load products\n// \tfor (var i = 1; i <= productCount; i++) {\n//         const product = await marketContract.methods.products(i).call();\n// \t\tlet millis = parseFloat(product.timestamp) * 1000;\n// \t\tlet productPrice = web3.utils.fromWei(product.price.toString(), \"ether\")\n// \t\tlet product_time = new Date(millis).toLocaleString();\n// \t\tproducts.push({\n// \t\t\tid: product.id,\n// \t\t\tproduct_name: product.name,\n// \t\t\towner: product.owner,\n// \t\t\tseller: product.seller,\n// \t\t\tproduct_price: productPrice,\n// \t\t\tproduct_idr: product.idr_price,\n// \t\t\tstatus_buy: product.purchased,\n// \t\t\ttimestamp: product_time\n// \t\t});\n// \t}\n// \treturn products;\n// }\n\n// export const createProduct = async (name, price, idrPrice, seller) => {\n// \tlet provider = window.ethereum;\n// \tlet marketContract;\n// \tconst web3 = new Web3(provider);\n// \tconst networkId = await web3.eth.net.getId();\n\n// \tmarketContract = new web3.eth.Contract(Marketplace.abi, Marketplace.networks[networkId].address);\n// \treturn marketContract.methods.createProduct(name, price, idrPrice).send({from: seller})\n// \t.then(productData => {\n// \t\treturn productData\n// \t}).catch(err => {\n// \t\treturn err.message;\n// \t});\n// }\n\nexport const getAuctionData = async () => {\n  let provider = window.ethereum;\n  let mainAuctionContract; // marketContract\n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n  let auctions = [];\n\n  mainAuctionContract = new web3.eth.Contract(\n    MainAuction.abi,\n    MainAuction.networks[networkId].address\n  );\n\n  let auctionCount = await mainAuctionContract.methods.auctionCount().call();\n  // Load products\n  for (var i = 1; i <= auctionCount; i++) {\n    const auction = await mainAuctionContract.methods.auctions(i).call();\n    let millis = parseFloat(auction.timestamp) * 1000;\n    let startPrice = web3.utils.fromWei(auction.startPrice.toString(), 'ether');\n    let auction_time = new Date(millis).toLocaleString();\n\n    auctions.push({\n      auctionId: auction.auctionId,\n      assetName: auction.assetName,\n      assetDetail: auction.assetDetail,\n      startPrice: startPrice,\n      assetOwner: auction.assetOwner,\n      ownerDeposite: auction.ownerDeposite,\n      auctionDuration: auction.auctionDuration,\n      // bidding: auction.biddingList,\n    });\n  }\n  return auctions;\n  // return mainAuctionContract.methods.auctions(1);\n};\n\nexport const createAuction = async (\n  assetName,\n  assetDetail,\n  startPrice,\n  assetOwner,\n  ownerDeposite,\n  auctionDuration\n) => {\n  let provider = window.ethereum;\n  let mainAuctionContract;\n  const web3 = new Web3(provider);\n  // const networkId = await web3.eth.net.getId();\n  const networkId = await web3.eth.net.getId();\n\n  mainAuctionContract = new web3.eth.Contract(\n    MainAuction.abi,\n    MainAuction.networks[networkId].address\n  );\n  return mainAuctionContract.methods\n    .createAuction(\n      assetName,\n      assetDetail,\n      startPrice,\n      ownerDeposite,\n      auctionDuration\n    )\n    .send({ from: assetOwner })\n    .then((auctionData) => {\n      return auctionData;\n    })\n    .catch((err) => {\n      return err.message;\n    });\n};\n\n// export const purchaseProduct = async (id, price, buyerAddr) => {\n//   let provider = window.ethereum;\n//   let marketContract;\n//   let priceToWei = Web3.utils.toWei(price, 'ether');\n//   const web3 = new Web3(provider);\n//   const networkId = await web3.eth.net.getId();\n\n//   marketContract = new web3.eth.Contract(\n//     Marketplace.abi,\n//     Marketplace.networks[networkId].address\n//   );\n//   return marketContract.methods\n//     .purchaseProduct(id)\n//     .send({ from: buyerAddr, value: priceToWei })\n//     .then((productData) => {\n//       return productData;\n//     })\n//     .catch((err) => {\n//       return err.message;\n//     });\n// };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}