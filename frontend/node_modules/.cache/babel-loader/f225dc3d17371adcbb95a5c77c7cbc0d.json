{"ast":null,"code":"import Web3 from 'web3';\nimport MainAuction from 'contracts/MainAuction.json';\nimport BiddingContract from 'contracts/Bidding.json';\nlet selectedAccount;\nexport const init = async () => {\n  let provider = window.ethereum;\n\n  if (typeof provider !== 'undefined') {\n    provider.on('accountsChanged', () => window.location.reload());\n    return provider.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      selectedAccount = accounts[0];\n      return selectedAccount;\n    }).catch(err => {\n      console.log(err);\n      return;\n    });\n  } else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n  }\n};\nexport const getAuctionData = async () => {\n  let provider = window.ethereum;\n  let mainAuctionContract; // marketContract\n\n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n  let auctions = [];\n  mainAuctionContract = new web3.eth.Contract(MainAuction.abi, MainAuction.networks[networkId].address);\n  let auctionCount = await mainAuctionContract.methods.auctionCount().call(); // Load products\n\n  for (var i = 1; i <= auctionCount; i++) {\n    const auction = await mainAuctionContract.methods.auctions(i).call(); //  let millis = parseFloat(auction.timestamp) * 1000;\n\n    let startPrice = web3.utils.fromWei(auction.startPrice.toString(), 'ether'); //  let auction_time = new Date(millis).toLocaleString();\n\n    auctions.push({\n      auctionId: auction.auctionId,\n      assetName: auction.assetName,\n      assetDetail: auction.assetDetail,\n      startPrice: startPrice,\n      assetOwner: auction.assetOwner,\n      //ownerDeposite: auction.ownerDeposite,\n      auctionDuration: auction.auctionDuration,\n      bidding: auction.bidding\n    });\n  }\n\n  return auctions; // return mainAuctionContract.methods.auctions(1);\n};\nexport const getBidData = async () => {\n  let provider = window.ethereum;\n  let biddingContract; // marketContract\n\n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n  let bids = [];\n  biddingContract = new web3.eth.Contract(BiddingContract.abi, BiddingContract.networks[networkId].address); //let bidCount = await biddingContract.methods.bidCount().call();\n  // Load products\n\n  for (var i = 1; i <= bidCount; i++) {\n    const bid = await biddingContract.methods.bids(i).call(); //  let millis = parseFloat(auction.timestamp) * 1000;\n    //let startPrice = web3.utils.fromWei(auction.startPrice.toString(), 'ether');\n    //  let auction_time = new Date(millis).toLocaleString();\n\n    bids.push({\n      bidder: bid.bidder,\n      amount: bid.value\n    });\n  }\n\n  return bids; // return mainAuctionContract.methods.auctions(1);\n};\nexport const createAuction = async (assetName, assetDetail, startPrice, assetOwner, // ownerDeposite,\nauctionDuration) => {\n  let provider = window.ethereum;\n  let mainAuctionContract;\n  const web3 = new Web3(provider); // const networkId = await web3.eth.net.getId();\n\n  const networkId = await web3.eth.net.getId();\n  let depositePrice = Web3.utils.toWei(startPrice, 'ether');\n  mainAuctionContract = new web3.eth.Contract(MainAuction.abi, MainAuction.networks[networkId].address);\n  return mainAuctionContract.methods.createAuction(assetName, assetDetail, startPrice, auctionDuration).send({\n    from: assetOwner,\n    value: depositePrice\n  }).then(auctionData => {\n    return auctionData;\n  }).catch(err => {\n    return err.message;\n  });\n};\nexport const placeBid = async bidding => {\n  let provider = window.ethereum;\n  let biddingContract;\n  const web3 = new Web3(provider); // const networkId = await web3.eth.net.getId();\n\n  const networkId = await web3.eth.net.getId();\n  let amount2 = Web3.utils.toWei(highestBid, 'wei');\n  biddingContract = new web3.eth.Contract(BiddingContract.abi, BiddingContract.networks[networkId].address);\n  const highestBid = await biddingContract.methods.highestBidder().call();\n  const highestBidder = await biddingContract.methods.highestBid().call();\n  const startPrice = await biddingContract.methods.startPrice().call();\n  const auctionDuration = await biddingContract.methods.auctionDuration().call();\n  const assetName = await biddingContract.methods.assetName().call();\n  const assetDetail = await biddingContract.methods.assetDetail().call();\n  const assetOwner = await biddingContract.methods.assetOwner().call();\n  return BiddingContract.methods.placeBid().send({\n    from: highestBidder,\n    value: highestBid\n  }).then(bidData => {\n    return bidData;\n  }).catch(err => {\n    return err.message;\n  });\n};","map":{"version":3,"names":["Web3","MainAuction","BiddingContract","selectedAccount","init","provider","window","ethereum","on","location","reload","request","method","then","accounts","catch","err","console","log","web3","currentProvider","getAuctionData","mainAuctionContract","networkId","eth","net","getId","auctions","Contract","abi","networks","address","auctionCount","methods","call","i","auction","startPrice","utils","fromWei","toString","push","auctionId","assetName","assetDetail","assetOwner","auctionDuration","bidding","getBidData","biddingContract","bids","bidCount","bid","bidder","amount","value","createAuction","depositePrice","toWei","send","from","auctionData","message","placeBid","amount2","highestBid","highestBidder","bidData"],"sources":["/Users/adityas/Desktop/KULIAH/SMT8/open-auction-dapps/frontend/src/components/Web3Client.js"],"sourcesContent":["import Web3 from 'web3';\nimport MainAuction from 'contracts/MainAuction.json';\nimport BiddingContract from 'contracts/Bidding.json';\n\nlet selectedAccount;\n\nexport const init = async () => {\n  let provider = window.ethereum;\n\n  if (typeof provider !== 'undefined') {\n    provider.on('accountsChanged', () => window.location.reload());\n    return provider\n      .request({ method: 'eth_requestAccounts' })\n      .then((accounts) => {\n        selectedAccount = accounts[0];\n        return selectedAccount;\n      })\n      .catch((err) => {\n        console.log(err);\n        return;\n      });\n  } else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    console.log(\n      'Non-Ethereum browser detected. You should consider trying MetaMask!'\n    );\n  }\n};\n\nexport const getAuctionData = async () => {\n  let provider = window.ethereum;\n  let mainAuctionContract; // marketContract\n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n  let auctions = [];\n\n  mainAuctionContract = new web3.eth.Contract(\n    MainAuction.abi,\n    MainAuction.networks[networkId].address\n  );\n\n  let auctionCount = await mainAuctionContract.methods.auctionCount().call();\n  // Load products\n  for (var i = 1; i <= auctionCount; i++) {\n    const auction = await mainAuctionContract.methods.auctions(i).call();\n    //  let millis = parseFloat(auction.timestamp) * 1000;\n    let startPrice = web3.utils.fromWei(auction.startPrice.toString(), 'ether');\n    //  let auction_time = new Date(millis).toLocaleString();\n\n    auctions.push({\n      auctionId: auction.auctionId,\n      assetName: auction.assetName,\n      assetDetail: auction.assetDetail,\n      startPrice: startPrice,\n      assetOwner: auction.assetOwner,\n      //ownerDeposite: auction.ownerDeposite,\n      auctionDuration: auction.auctionDuration,\n      bidding: auction.bidding,\n    });\n  }\n  return auctions;\n  // return mainAuctionContract.methods.auctions(1);\n};\n\nexport const getBidData = async () => {\n  let provider = window.ethereum;\n  let biddingContract; // marketContract\n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n  let bids = [];\n\n  biddingContract = new web3.eth.Contract(\n    BiddingContract.abi,\n    BiddingContract.networks[networkId].address\n  );\n\n  //let bidCount = await biddingContract.methods.bidCount().call();\n  // Load products\n  for (var i = 1; i <= bidCount; i++) {\n    const bid = await biddingContract.methods.bids(i).call();\n    //  let millis = parseFloat(auction.timestamp) * 1000;\n    //let startPrice = web3.utils.fromWei(auction.startPrice.toString(), 'ether');\n    //  let auction_time = new Date(millis).toLocaleString();\n\n    bids.push({\n      bidder: bid.bidder,\n      amount: bid.value,\n    });\n  }\n  return bids;\n  // return mainAuctionContract.methods.auctions(1);\n};\n\nexport const createAuction = async (\n  assetName,\n  assetDetail,\n  startPrice,\n  assetOwner,\n  // ownerDeposite,\n  auctionDuration\n) => {\n  let provider = window.ethereum;\n  let mainAuctionContract;\n  const web3 = new Web3(provider);\n  // const networkId = await web3.eth.net.getId();\n  const networkId = await web3.eth.net.getId();\n  let depositePrice = Web3.utils.toWei(startPrice, 'ether');\n\n  mainAuctionContract = new web3.eth.Contract(\n    MainAuction.abi,\n    MainAuction.networks[networkId].address\n  );\n  return mainAuctionContract.methods\n    .createAuction(assetName, assetDetail, startPrice, auctionDuration)\n    .send({ from: assetOwner, value: depositePrice })\n    .then((auctionData) => {\n      return auctionData;\n    })\n    .catch((err) => {\n      return err.message;\n    });\n};\n\nexport const placeBid = async (bidding) => {\n  let provider = window.ethereum;\n  let biddingContract;\n  const web3 = new Web3(provider);\n  // const networkId = await web3.eth.net.getId();\n  const networkId = await web3.eth.net.getId();\n  let amount2 = Web3.utils.toWei(highestBid, 'wei');\n\n  biddingContract = new web3.eth.Contract(\n    BiddingContract.abi,\n    BiddingContract.networks[networkId].address\n  );\n\n  const highestBid = await biddingContract.methods.highestBidder().call();\n  const highestBidder = await biddingContract.methods.highestBid().call();\n  const startPrice = await biddingContract.methods.startPrice().call();\n  const auctionDuration = await biddingContract.methods\n    .auctionDuration()\n    .call();\n  const assetName = await biddingContract.methods.assetName().call();\n  const assetDetail = await biddingContract.methods.assetDetail().call();\n  const assetOwner = await biddingContract.methods.assetOwner().call();\n\n  return BiddingContract.methods\n    .placeBid()\n    .send({ from: highestBidder, value: highestBid })\n    .then((bidData) => {\n      return bidData;\n    })\n    .catch((err) => {\n      return err.message;\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}