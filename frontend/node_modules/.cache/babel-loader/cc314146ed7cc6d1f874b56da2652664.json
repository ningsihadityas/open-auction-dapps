{"ast":null,"code":"import Web3 from 'web3';\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener('load', async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.request(methods, {\n          from: accounts[0]\n          /* ... */\n\n        }); // Accounts now expos\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log('Injected web3 detected.');\n      resolve(web3);\n    } // Fallback to localhost; use dev console port by default...\n    else {\n      const provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545');\n      const web3 = new Web3(provider);\n      console.log('No web3 instance injected, using Local web3.');\n      resolve(web3);\n    }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","request","methods","from","accounts","error","console","log","provider","providers","HttpProvider"],"sources":["/Users/adityas/Desktop/KULIAH/SMT8/open-auction-dapps/frontend/src/getWeb3.js"],"sourcesContent":["import Web3 from 'web3';\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.request((methods: 'eth_requestAccounts'), {\n            from: accounts[0] /* ... */,\n          });\n\n          // Accounts now expos\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log('Injected web3 detected.');\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          'http://127.0.0.1:7545'\n        );\n        const web3 = new Web3(provider);\n        console.log('No web3 instance injected, using Local web3.');\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC/B;EACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;IAC1C;IACA,IAAID,MAAM,CAACE,QAAX,EAAqB;MACnB,MAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAAb;;MACA,IAAI;QACF;QACA,MAAMF,MAAM,CAACE,QAAP,CAAgBE,OAAhB,CAAyBC,OAAzB,EAA0D;UAC9DC,IAAI,EAAEC,QAAQ,CAAC,CAAD;UAAI;;QAD4C,CAA1D,CAAN,CAFE,CAMF;;QACAT,OAAO,CAACK,IAAD,CAAP;MACD,CARD,CAQE,OAAOK,KAAP,EAAc;QACdT,MAAM,CAACS,KAAD,CAAN;MACD;IACF,CAbD,CAcA;IAdA,KAeK,IAAIR,MAAM,CAACG,IAAX,EAAiB;MACpB;MACA,MAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;MACAM,OAAO,CAACC,GAAR,CAAY,yBAAZ;MACAZ,OAAO,CAACK,IAAD,CAAP;IACD,CALI,CAML;IANK,KAOA;MACH,MAAMQ,QAAQ,GAAG,IAAIhB,IAAI,CAACiB,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;MAGA,MAAMV,IAAI,GAAG,IAAIR,IAAJ,CAASgB,QAAT,CAAb;MACAF,OAAO,CAACC,GAAR,CAAY,8CAAZ;MACAZ,OAAO,CAACK,IAAD,CAAP;IACD;EACF,CAhCD;AAiCD,CAnCD,CADF;;AAsCA,eAAeP,OAAf"},"metadata":{},"sourceType":"module"}