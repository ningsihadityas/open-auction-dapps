{"ast":null,"code":"import Web3 from 'web3';\nlet selectedAccount;\n\nconst getWeb3 = () => {\n  let provider = window.ethereum;\n\n  if (typeof provider !== 'undefined') {\n    provider.on('accountsChanged', () => window.location.reload());\n    return provider.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      selectedAccount = accounts[0];\n      return selectedAccount;\n    }).catch(err => {\n      console.log(err);\n      return;\n    });\n  } else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n  }\n}; //   new Promise((resolve, reject) => {\n//     // Wait for loading completion to avoid race conditions with web3 injection timing.\n//     window.addEventListener('load', async () => {\n//       // Modern dapp browsers...\n//       if (window.ethereum) {\n//         const web3 = new Web3(window.ethereum);\n//         try {\n//           // Request account access if needed\n//           await window.ethereum.enable();\n//           // Accounts now exposed\n//           resolve(web3);\n//         } catch (error) {\n//           reject(error);\n//         }\n//       }\n//       // Legacy dapp browsers...\n//       else if (window.web3) {\n//         // Use Mist/MetaMask's provider.\n//         const web3 = window.web3;\n//         console.log('Injected web3 detected.');\n//         resolve(web3);\n//       }\n//       // Fallback to localhost; use dev console port by default...\n//       else {\n//         const provider = new Web3.providers.HttpProvider(\n//           'http://127.0.0.1:7545'\n//         );\n//         const web3 = new Web3(provider);\n//         console.log('No web3 instance injected, using Local web3.');\n//         resolve(web3);\n//       }\n//     });\n//   }\n// );\n\n\nexport default getWeb3;","map":{"version":3,"names":["Web3","selectedAccount","getWeb3","provider","window","ethereum","on","location","reload","request","method","then","accounts","catch","err","console","log","web3","currentProvider"],"sources":["/Users/adityas/Desktop/KULIAH/SMT8/open-auction-dapps/frontend/src/getWeb3.js"],"sourcesContent":["import Web3 from 'web3';\n\nlet selectedAccount;\n\nconst getWeb3 = () => {\n  let provider = window.ethereum;\n\n  if (typeof provider !== 'undefined') {\n    provider.on('accountsChanged', () => window.location.reload());\n    return provider\n      .request({ method: 'eth_requestAccounts' })\n      .then((accounts) => {\n        selectedAccount = accounts[0];\n        return selectedAccount;\n      })\n      .catch((err) => {\n        console.log(err);\n        return;\n      });\n  } else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    console.log(\n      'Non-Ethereum browser detected. You should consider trying MetaMask!'\n    );\n  }\n};\n//   new Promise((resolve, reject) => {\n//     // Wait for loading completion to avoid race conditions with web3 injection timing.\n//     window.addEventListener('load', async () => {\n//       // Modern dapp browsers...\n//       if (window.ethereum) {\n//         const web3 = new Web3(window.ethereum);\n//         try {\n//           // Request account access if needed\n//           await window.ethereum.enable();\n//           // Accounts now exposed\n//           resolve(web3);\n//         } catch (error) {\n//           reject(error);\n//         }\n//       }\n//       // Legacy dapp browsers...\n//       else if (window.web3) {\n//         // Use Mist/MetaMask's provider.\n//         const web3 = window.web3;\n//         console.log('Injected web3 detected.');\n//         resolve(web3);\n//       }\n//       // Fallback to localhost; use dev console port by default...\n//       else {\n//         const provider = new Web3.providers.HttpProvider(\n//           'http://127.0.0.1:7545'\n//         );\n//         const web3 = new Web3(provider);\n//         console.log('No web3 instance injected, using Local web3.');\n//         resolve(web3);\n//       }\n//     });\n//   }\n\n// );\n\nexport default getWeb3;\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,eAAJ;;AAEA,MAAMC,OAAO,GAAG,MAAM;EACpB,IAAIC,QAAQ,GAAGC,MAAM,CAACC,QAAtB;;EAEA,IAAI,OAAOF,QAAP,KAAoB,WAAxB,EAAqC;IACnCA,QAAQ,CAACG,EAAT,CAAY,iBAAZ,EAA+B,MAAMF,MAAM,CAACG,QAAP,CAAgBC,MAAhB,EAArC;IACA,OAAOL,QAAQ,CACZM,OADI,CACI;MAAEC,MAAM,EAAE;IAAV,CADJ,EAEJC,IAFI,CAEEC,QAAD,IAAc;MAClBX,eAAe,GAAGW,QAAQ,CAAC,CAAD,CAA1B;MACA,OAAOX,eAAP;IACD,CALI,EAMJY,KANI,CAMGC,GAAD,IAAS;MACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACA;IACD,CATI,CAAP;EAUD,CAZD,MAYO,IAAIV,MAAM,CAACa,IAAX,EAAiB;IACtBb,MAAM,CAACa,IAAP,GAAc,IAAIjB,IAAJ,CAASI,MAAM,CAACa,IAAP,CAAYC,eAArB,CAAd;EACD,CAFM,MAEA;IACLH,OAAO,CAACC,GAAR,CACE,qEADF;EAGD;AACF,CAtBD,C,CAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,eAAed,OAAf"},"metadata":{},"sourceType":"module"}